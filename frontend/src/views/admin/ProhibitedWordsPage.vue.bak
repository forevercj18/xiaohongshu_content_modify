<template>
  <div class="prohibited-words-page">
    <AdminLayout>
      <template #header>
        <div class="page-header">
          <h1>违禁词管理</h1>
          <p>管理内容检测中使用的违禁词库</p>
        </div>
      </template>
      
      <!-- 工具栏 -->
      <div class="toolbar">
        <div class="toolbar-left">
          <el-input
            v-model="searchKeyword"
            placeholder="搜索违禁词..."
            size="default"
            clearable
            style="width: 300px;"
            @input="handleSearch"
          >
            <template #prefix>
              <Search :size="16" />
            </template>
          </el-input>
          
          <el-select
            v-model="selectedCategory"
            placeholder="选择分类"
            size="default"
            clearable
            style="width: 150px;"
            @change="handleFilter"
          >
            <el-option label="全部" value="" />
            <el-option label="政治敏感" value="political" />
            <el-option label="色情低俗" value="adult" />
            <el-option label="暴力血腥" value="violence" />
            <el-option label="商业广告" value="commercial" />
            <el-option label="其他" value="other" />
          </el-select>
        </div>
        
        <div class="toolbar-right">
          <el-button
            type="primary"
            @click="showAddDialog = true"
          >
            <Plus :size="16" />
            添加违禁词
          </el-button>
          
          <el-button
            type="default"
            @click="exportWords"
          >
            <Download :size="16" />
            导出
          </el-button>
          
          <el-button
            type="default"
            @click="showImportDialog = true"
          >
            <Upload :size="16" />
            批量导入
          </el-button>
        </div>
      </div>
      
      <!-- 统计信息 -->
      <div class="stats-bar">
        <div class="stat-item">
          <span class="stat-label">总计:</span>
          <span class="stat-value">{{ filteredWords.length }}</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">已启用:</span>
          <span class="stat-value active">{{ filteredWords.filter(w => w.is_active).length }}</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">已禁用:</span>
          <span class="stat-value disabled">{{ filteredWords.filter(w => !w.is_active).length }}</span>
        </div>
      </div>
      
      <!-- 违禁词列表 -->
      <div class="words-table">
        <el-table
          :data="paginatedWords"
          stripe
          v-loading="loading"
        >
          <el-table-column prop="word" label="违禁词" min-width="120">
            <template #default="{ row }">
              <span class="word-text">{{ row.word }}</span>
            </template>
          </el-table-column>
          
          <el-table-column prop="category" label="分类" width="100">
            <template #default="{ row }">
              <el-tag
                :type="getCategoryTagType(row.category)"
                size="small"
              >
                {{ getCategoryText(row.category) }}
              </el-tag>
            </template>
          </el-table-column>
          
          <el-table-column prop="description" label="描述" min-width="150">
            <template #default="{ row }">
              <span class="description-text">
                {{ row.description || '无描述' }}
              </span>
            </template>
          </el-table-column>
          
          <el-table-column prop="severity" label="严重程度" width="100">
            <template #default="{ row }">
              <el-tag
                :type="getSeverityTagType(row.severity)"
                size="small"
              >
                {{ getSeverityText(row.severity) }}
              </el-tag>
            </template>
          </el-table-column>
          
          <el-table-column prop="is_active" label="状态" width="80">
            <template #default="{ row }">
              <el-switch
                v-model="row.is_active"
                @change="updateWordStatus(row)"
              />
            </template>
          </el-table-column>
          
          <el-table-column prop="created_at" label="创建时间" width="120">
            <template #default="{ row }">
              <span class="time-text">
                {{ formatDate(row.created_at) }}
              </span>
            </template>
          </el-table-column>
          
          <el-table-column label="操作" width="120" fixed="right">
            <template #default="{ row }">
              <div class="action-buttons">
                <el-button
                  type="text"
                  size="small"
                  @click="editWord(row)"
                >
                  <Edit2 :size="14" />
                </el-button>
                <el-button
                  type="text"
                  size="small"
                  @click="deleteWord(row)"
                  class="delete-btn"
                >
                  <Trash2 :size="14" />
                </el-button>
              </div>
            </template>
          </el-table-column>
        </el-table>
        
        <!-- 分页 -->
        <div class="pagination">
          <el-pagination
            v-model:current-page="currentPage"
            v-model:page-size="pageSize"
            :page-sizes="[10, 20, 50, 100]"
            :total="filteredWords.length"
            layout="total, sizes, prev, pager, next, jumper"
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
          />
        </div>
      </div>
    </AdminLayout>
    
    <!-- 添加/编辑对话框 -->
    <el-dialog
      v-model="showAddDialog"
      :title="editingWord ? '编辑违禁词' : '添加违禁词'"
      width="500px"
    >
      <el-form
        ref="wordFormRef"
        :model="wordForm"
        :rules="wordFormRules"
        label-width="80px"
      >
        <el-form-item label="违禁词" prop="word">
          <el-input
            v-model="wordForm.word"
            placeholder="请输入违禁词"
            clearable
          />
        </el-form-item>
        
        <el-form-item label="分类" prop="category">
          <el-select
            v-model="wordForm.category"
            placeholder="选择分类"
            style="width: 100%;"
          >
            <el-option label="政治敏感" value="political" />
            <el-option label="色情低俗" value="adult" />
            <el-option label="暴力血腥" value="violence" />
            <el-option label="商业广告" value="commercial" />
            <el-option label="其他" value="other" />
          </el-select>
        </el-form-item>
        
        <el-form-item label="严重程度" prop="severity">
          <el-select
            v-model="wordForm.severity"
            placeholder="选择严重程度"
            style="width: 100%;"
          >
            <el-option label="低" value="low" />
            <el-option label="中" value="medium" />
            <el-option label="高" value="high" />
          </el-select>
        </el-form-item>
        
        <el-form-item label="描述">
          <el-input
            v-model="wordForm.description"
            type="textarea"
            placeholder="可选：添加描述信息"
            :rows="3"
          />
        </el-form-item>
        
        <el-form-item label="状态">
          <el-switch
            v-model="wordForm.is_active"
            active-text="启用"
            inactive-text="禁用"
          />
        </el-form-item>
      </el-form>
      
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="showAddDialog = false">取消</el-button>
          <el-button
            type="primary"
            @click="saveWord"
            :loading="saving"
          >
            {{ editingWord ? '更新' : '添加' }}
          </el-button>
        </span>
      </template>
    </el-dialog>
    
    <!-- 批量导入对话框 -->
    <el-dialog
      v-model="showImportDialog"
      title="批量导入违禁词"
      width="600px"
    >
      <div class="import-section">
        <div class="import-tips">
          <h4>导入说明：</h4>
          <ul>
            <li>支持 .txt 和 .csv 格式文件</li>
            <li>TXT 格式：每行一个违禁词</li>
            <li>CSV 格式：列顺序为 word,category,severity,description</li>
            <li>文件大小不超过 5MB</li>
          </ul>
        </div>
        
        <el-upload
          ref="uploadRef"
          class="upload-demo"
          drag
          :auto-upload="false"
          :on-change="handleFileChange"
          :before-upload="beforeUpload"
          accept=".txt,.csv"
          :limit="1"
        >
          <el-icon class="el-icon--upload"><upload-filled /></el-icon>
          <div class="el-upload__text">
            将文件拖到此处，或<em>点击上传</em>
          </div>
          <template #tip>
            <div class="el-upload__tip">
              只能上传 txt/csv 文件，且不超过 5MB
            </div>
          </template>
        </el-upload>
        
        <div v-if="importPreview.length > 0" class="import-preview">
          <h4>预览数据（前10条）：</h4>
          <el-table :data="importPreview.slice(0, 10)" size="small">
            <el-table-column prop="word" label="违禁词" />
            <el-table-column prop="category" label="分类" />
            <el-table-column prop="severity" label="严重程度" />
          </el-table>
          <p class="preview-info">共 {{ importPreview.length }} 条数据</p>
        </div>
      </div>
      
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="showImportDialog = false">取消</el-button>
          <el-button
            type="primary"
            @click="importWords"
            :loading="importing"
            :disabled="importPreview.length === 0"
          >
            导入 ({{ importPreview.length }})
          </el-button>
        </span>
      </template>
    </el-dialog>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, reactive } from 'vue'
import { ElMessage, ElMessageBox, type FormInstance, type FormRules } from 'element-plus'
import { 
  Search, 
  Plus, 
  Download, 
  Upload, 
  Edit2, 
  Trash2,
  UploadFilled
} from 'lucide-vue-next'

import AdminLayout from '@/components/admin/AdminLayout.vue'
import { getProhibitedWords, createProhibitedWord, updateProhibitedWord, deleteProhibitedWord } from '@/api/prohibited-words'

interface ProhibitedWord {
  id: number
  word: string
  category: string
  severity: string
  description?: string
  is_active: boolean
  created_at: string
  updated_at: string
}

const loading = ref(false)
const saving = ref(false)
const importing = ref(false)

const words = ref<ProhibitedWord[]>([])
const searchKeyword = ref('')
const selectedCategory = ref('')
const currentPage = ref(1)
const pageSize = ref(20)

const showAddDialog = ref(false)
const showImportDialog = ref(false)
const editingWord = ref<ProhibitedWord | null>(null)

const wordFormRef = ref<FormInstance>()
const wordForm = reactive({
  word: '',
  category: '',
  severity: 'medium',
  description: '',
  is_active: true
})

const wordFormRules: FormRules = {
  word: [
    { required: true, message: '请输入违禁词', trigger: 'blur' },
    { min: 1, max: 50, message: '长度在 1 到 50 个字符', trigger: 'blur' }
  ],
  category: [
    { required: true, message: '请选择分类', trigger: 'change' }
  ],
  severity: [
    { required: true, message: '请选择严重程度', trigger: 'change' }
  ]
}

const importPreview = ref<any[]>([])

// 计算属性
const filteredWords = computed(() => {
  let result = words.value

  if (searchKeyword.value) {
    const keyword = searchKeyword.value.toLowerCase()
    result = result.filter(word => 
      word.word.toLowerCase().includes(keyword) ||
      (word.description && word.description.toLowerCase().includes(keyword))
    )
  }

  if (selectedCategory.value) {
    result = result.filter(word => word.category === selectedCategory.value)
  }

  return result
})

const paginatedWords = computed(() => {
  const start = (currentPage.value - 1) * pageSize.value
  const end = start + pageSize.value
  return filteredWords.value.slice(start, end)
})

// 生命周期
onMounted(async () => {
  await loadWords()
})

// 方法
const loadWords = async () => {
  loading.value = true
  try {
    words.value = await getProhibitedWords()
  } catch (error) {
    console.error('加载违禁词失败:', error)
    ElMessage.error('加载违禁词失败')
  } finally {
    loading.value = false
  }
}

const handleSearch = () => {
  currentPage.value = 1
}

const handleFilter = () => {
  currentPage.value = 1
}

const handleSizeChange = (val: number) => {
  pageSize.value = val
  currentPage.value = 1
}

const handleCurrentChange = (val: number) => {
  currentPage.value = val
}

const getCategoryText = (category: string) => {
  const map: Record<string, string> = {
    political: '政治敏感',
    adult: '色情低俗',
    violence: '暴力血腥',
    commercial: '商业广告',
    other: '其他'
  }
  return map[category] || category
}

const getCategoryTagType = (category: string) => {
  const map: Record<string, string> = {
    political: 'danger',
    adult: 'warning',
    violence: 'danger',
    commercial: 'info',
    other: ''
  }
  return map[category] || ''
}

const getSeverityText = (severity: string) => {
  const map: Record<string, string> = {
    low: '低',
    medium: '中',
    high: '高'
  }
  return map[severity] || severity
}

const getSeverityTagType = (severity: string) => {
  const map: Record<string, string> = {
    low: 'success',
    medium: 'warning',
    high: 'danger'
  }
  return map[severity] || ''
}

const formatDate = (dateString: string) => {
  const date = new Date(dateString)
  return date.toLocaleDateString('zh-CN')
}

const editWord = (word: ProhibitedWord) => {
  editingWord.value = word
  Object.assign(wordForm, {
    word: word.word,
    category: word.category,
    severity: word.severity,
    description: word.description || '',
    is_active: word.is_active
  })
  showAddDialog.value = true
}

const deleteWord = async (word: ProhibitedWord) => {
  try {
    await ElMessageBox.confirm(
      `确定要删除违禁词 "${word.word}" 吗？`,
      '确认删除',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }
    )
    
    await deleteProhibitedWord(word.id)
    ElMessage.success('删除成功')
    await loadWords()
  } catch (error: any) {
    if (error !== 'cancel') {
      console.error('删除违禁词失败:', error)
      ElMessage.error('删除失败')
    }
  }
}

const updateWordStatus = async (word: ProhibitedWord) => {
  try {
    await updateProhibitedWord(word.id, { is_active: word.is_active })
    ElMessage.success(word.is_active ? '已启用' : '已禁用')
  } catch (error) {
    console.error('更新状态失败:', error)
    ElMessage.error('更新状态失败')
    // 回滚状态
    word.is_active = !word.is_active
  }
}

const saveWord = async () => {
  if (!wordFormRef.value) return
  
  await wordFormRef.value.validate(async (valid) => {
    if (!valid) return
    
    saving.value = true
    try {
      if (editingWord.value) {
        await updateProhibitedWord(editingWord.value.id, wordForm)
        ElMessage.success('更新成功')
      } else {
        await createProhibitedWord(wordForm)
        ElMessage.success('添加成功')
      }
      
      showAddDialog.value = false
      resetForm()
      await loadWords()
    } catch (error: any) {
      console.error('保存违禁词失败:', error)
      ElMessage.error(error.response?.data?.detail || '保存失败')
    } finally {
      saving.value = false
    }
  })
}

const resetForm = () => {
  editingWord.value = null
  Object.assign(wordForm, {
    word: '',
    category: '',
    severity: 'medium',
    description: '',
    is_active: true
  })
  wordFormRef.value?.clearValidate()
}

const exportWords = () => {
  const csvContent = words.value.map(word => 
    `${word.word},${word.category},${word.severity},"${word.description || ''}",${word.is_active}`
  ).join('\n')
  
  const header = 'word,category,severity,description,is_active\n'
  const blob = new Blob([header + csvContent], { type: 'text/csv;charset=utf-8;' })
  const link = document.createElement('a')
  const url = URL.createObjectURL(blob)
  link.setAttribute('href', url)
  link.setAttribute('download', `prohibited_words_${new Date().toISOString().split('T')[0]}.csv`)
  link.style.visibility = 'hidden'
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

const handleFileChange = (file: any) => {
  const reader = new FileReader()
  reader.onload = (e) => {
    const content = e.target?.result as string
    parseImportFile(content, file.name)
  }
  reader.readAsText(file.raw)
}

const beforeUpload = () => {
  return false // 阻止自动上传
}

const parseImportFile = (content: string, filename: string) => {
  const lines = content.trim().split('\n')
  const preview: any[] = []
  
  if (filename.endsWith('.csv')) {
    // CSV 格式
    lines.forEach((line, index) => {
      if (index === 0) return // 跳过标题行
      const [word, category = 'other', severity = 'medium', description = ''] = line.split(',')
      if (word?.trim()) {
        preview.push({
          word: word.trim(),
          category: category.trim(),
          severity: severity.trim(),
          description: description.replace(/"/g, '').trim()
        })
      }
    })
  } else {
    // TXT 格式
    lines.forEach(line => {
      if (line.trim()) {
        preview.push({
          word: line.trim(),
          category: 'other',
          severity: 'medium',
          description: ''
        })
      }
    })
  }
  
  importPreview.value = preview
}

const importWords = async () => {
  importing.value = true
  try {
    for (const word of importPreview.value) {
      await createProhibitedWord({
        ...word,
        is_active: true
      })
    }
    
    ElMessage.success(`成功导入 ${importPreview.value.length} 个违禁词`)
    showImportDialog.value = false
    importPreview.value = []
    await loadWords()
  } catch (error: any) {
    console.error('导入失败:', error)
    ElMessage.error('导入失败')
  } finally {
    importing.value = false
  }
}
</script>

<style lang="scss" scoped>
.prohibited-words-page {
  min-height: 100vh;
  background: var(--bg-secondary);
}

.page-header {
  h1 {
    font-size: 28px;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 8px;
  }
  
  p {
    color: var(--text-secondary);
    font-size: 16px;
  }
}

.toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  background: var(--bg-primary);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 16px 20px;
  
  .toolbar-left {
    display: flex;
    align-items: center;
    gap: 12px;
  }
  
  .toolbar-right {
    display: flex;
    align-items: center;
    gap: 12px;
  }
}

.stats-bar {
  display: flex;
  gap: 24px;
  margin-bottom: 20px;
  
  .stat-item {
    display: flex;
    align-items: center;
    gap: 8px;
    
    .stat-label {
      font-size: 14px;
      color: var(--text-secondary);
    }
    
    .stat-value {
      font-size: 16px;
      font-weight: 600;
      color: var(--text-primary);
      
      &.active {
        color: var(--success);
      }
      
      &.disabled {
        color: var(--warning);
      }
    }
  }
}

.words-table {
  background: var(--bg-primary);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  overflow: hidden;
  
  .word-text {
    font-weight: 500;
    color: var(--text-primary);
  }
  
  .description-text {
    color: var(--text-secondary);
    font-size: 13px;
  }
  
  .time-text {
    color: var(--text-muted);
    font-size: 12px;
  }
  
  .action-buttons {
    display: flex;
    gap: 4px;
    
    .delete-btn {
      color: var(--danger);
      
      &:hover {
        background: var(--danger-10);
      }
    }
  }
  
  .pagination {
    padding: 16px;
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: center;
  }
}

.import-section {
  .import-tips {
    margin-bottom: 20px;
    padding: 16px;
    background: var(--info-10);
    border-radius: 6px;
    
    h4 {
      margin: 0 0 8px 0;
      color: var(--info);
    }
    
    ul {
      margin: 0;
      padding-left: 20px;
      color: var(--text-secondary);
      
      li {
        margin: 4px 0;
        font-size: 13px;
      }
    }
  }
  
  .import-preview {
    margin-top: 20px;
    
    h4 {
      margin-bottom: 12px;
      color: var(--text-primary);
    }
    
    .preview-info {
      margin-top: 8px;
      font-size: 13px;
      color: var(--text-secondary);
    }
  }
}

// 响应式设计
@media (max-width: 768px) {
  .toolbar {
    flex-direction: column;
    gap: 16px;
    
    .toolbar-left,
    .toolbar-right {
      width: 100%;
      justify-content: space-between;
    }
  }
  
  .stats-bar {
    flex-wrap: wrap;
  }
}
</style>